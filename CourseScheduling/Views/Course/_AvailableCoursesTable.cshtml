@model CourseScheduling.ViewModel.CourseEnrollmentViewModel

<table class="table table-bordered table-hover table-striped fixed-header-table">
    <thead class="thead-dark">
        <tr>
            <th>Course Code</th>
            <th>Course Name</th>
            <th>Credits</th>
            <th>Time</th>
            <th>Professor</th>
            <th>Seats Available</th> <!-- Available Seats -->
            <th>Action</th>
        </tr>
    </thead>

    <tbody>
        @foreach (var course in Model.AvailableCourses)
        {
            var enrolledCourses = ViewBag.EnrolledCourses as List<CourseScheduling.Models.Enrollment>;
            var waitlistedCourses = ViewBag.WaitlistedCourses as List<CourseScheduling.Models.Waitlist>;

            bool isEnrolled = enrolledCourses != null && enrolledCourses.Any(e => e.CourseId == course.CourseId);
            bool isWaitlisted = waitlistedCourses != null && waitlistedCourses.Any(w => w.CourseId == course.CourseId);

            int availableSeats = course.MaxCapacity - course.CurrentEnrollment;

            // Check if the course has a time conflict
            string timeConflictIndicator = course.HasConflict ? " (Conflict)" : "";


            <tr id="courseRow-@course.CourseId" style="cursor: pointer;" onclick="showCourseDetails(@course.CourseId)">
                <td>@course.CourseCode</td>
                <td>@course.CourseName</td>
                <td>@course.Credits</td>
                <td>@course.Time<span style="color: red;">@timeConflictIndicator</span></td>
                <td>@course.Professor</td>
                <td class="seatsColumn">@availableSeats / @course.MaxCapacity</td>
                <td>
                    @if (isEnrolled)
                    {
                        <button type="button" class="btn btn-success btn-sm enrollButton" onclick="event.stopPropagation(); deleteEnrollment(event, @enrolledCourses.First(e => e.CourseId == course.CourseId).EnrollmentId)">Enrolled</button>
                    }
                    else if (isWaitlisted)
                    {
                        <button type="button" class="btn btn-warning btn-sm" disabled>Waitlisted</button>
                    }
                    else if (availableSeats <= 0)
                    {
                        <button type="button" class="btn btn-secondary btn-sm" disabled>Full</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-primary btn-sm enrollButton" onclick="enroll(event, @course.CourseId)">Enroll</button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<h3 class="mt-5">Recommended Courses Based on Your Major (@Model.Major)</h3>

@if (Model.RecommendedCourses == null || !Model.RecommendedCourses.Any())
{
    <p>No recommended courses found for your major.</p>
}
else
{
    <table class="table table-bordered table-hover table-striped fixed-header-table">
        <thead class="thead-dark">
            <tr>
                <th>Course Code</th>
                <th>Course Name</th>
                <th>Credits</th>
                <th>Time</th>
                <th>Professor</th>
                <th>Seats Available</th>
                <th>Action</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var course in Model.RecommendedCourses)
            {
                var enrolledCourses = ViewBag.EnrolledCourses as List<CourseScheduling.Models.Enrollment>;
                var waitlistedCourses = ViewBag.WaitlistedCourses as List<CourseScheduling.Models.Waitlist>;

                bool isEnrolled = enrolledCourses != null && enrolledCourses.Any(e => e.CourseId == course.CourseId);
                bool isWaitlisted = waitlistedCourses != null && waitlistedCourses.Any(w => w.CourseId == course.CourseId);

                int availableSeats = course.MaxCapacity - course.CurrentEnrollment;
                string timeConflictIndicator = course.HasConflict ? " (Conflict)" : "";

                <tr id="recommendedRow-@course.CourseId" style="cursor: pointer;" onclick="showCourseDetails(@course.CourseId)">
                    <td>@course.CourseCode</td>
                    <td>@course.CourseName</td>
                    <td>@course.Credits</td>
                    <td>@course.Time<span style="color: red;">@timeConflictIndicator</span></td>
                    <td>@course.Professor</td>
                    <td>@availableSeats / @course.MaxCapacity</td>
                    <td>
                        @if (isEnrolled)
                        {
                            <button type="button" class="btn btn-success btn-sm enrollButton" onclick="event.stopPropagation(); deleteEnrollment(event, @enrolledCourses.First(e => e.CourseId == course.CourseId).EnrollmentId)">Enrolled</button>
                        }
                        else if (isWaitlisted)
                        {
                            <button type="button" class="btn btn-warning btn-sm" disabled>Waitlisted</button>
                        }
                        else if (availableSeats <= 0)
                        {
                            <button type="button" class="btn btn-secondary btn-sm" disabled>Full</button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-primary btn-sm enrollButton" onclick="enroll(event, @course.CourseId)">Enroll</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
