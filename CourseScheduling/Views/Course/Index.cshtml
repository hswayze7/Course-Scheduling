@model CourseScheduling.Models.CourseEnrollmentViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Html.AntiForgeryToken()

<div class="container mt-4">
    <h2 class="text-primary">Available Courses</h2>

    <!-- Display student name if logged in -->
    @if (ViewBag.StudentName != null)
    {
        <p class="text-success">Welcome, <strong>@ViewBag.StudentName</strong>!</p>
    }

    <!-- Table for selecting courses to enroll in -->
    <h3>Select Courses to Enroll</h3>
    <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
        <table class="table table-bordered table-hover table-striped mb-5">
            <thead class="thead-dark">
                <tr>
                    <th>Course Code</th>
                    <th>Course Name</th>
                    <th>Credits</th>
                    <th>Time</th>
                    <th>Professor</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var course in Model.AvailableCourses) 
                {
                    <tr>
                        <td>@course.CourseCode</td>
                        <td>@course.CourseName</td>
                        <td>@course.Credits</td>
                        <td>@course.Time</td>
                        <td>@course.Professor</td>
                        <td>
                            <button type="button" class="btn btn-primary" onclick="console.log('Enroll button clicked'); enroll(@course.CourseId)">Enroll</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <!-- Enrolled courses section -->
    <div class="container mt-4">
        <h2 class="text-primary">Your Enrolled Courses</h2>

        <!-- Enrolled courses table -->
        <div id="enrolledCourses">
            @await Html.PartialAsync("_EnrolledCourses", Model.EnrolledCourses)
        </div>

        <!-- Calendar object -->
        <h3 class="text-secondary mt-4">Class Schedule</h3>
        <div id="calendar"></div>
    </div>
   
</div>



<script>
    async function enroll(courseId) {
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        console.log("CourseId being passed:", courseId);

        try {
            // First, enroll the student
            const response = await fetch('/Course/Enroll', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': token
                },
                body: JSON.stringify({ courseId: courseId })  // Pass the courseId
            });

            if (response.ok) {
                console.log("Enrollment successful.");

                // Fetch the updated enrolled courses after successful enrollment
                const enrolledCoursesResponse = await fetch('/Course/GetEnrolledCoursesTable', {
                    method: 'GET'
                });

                if (enrolledCoursesResponse.ok) {
                    const html = await enrolledCoursesResponse.text();  // Fetch the updated HTML for enrolled courses
                    document.getElementById("enrolledCourses").innerHTML = html;  // Update the enrolled courses table
                    updateCalendar(); //Should update the calendar
                } 
                else 
                {
                    console.error("Failed to fetch enrolled courses. Response code: " + enrolledCoursesResponse.status);
                }
            }   
            else 
                {
                console.error("Failed to enroll. Response code: " + response.status);
                }
        } 
        catch (error) 
        {
            console.error("Error during enrollment:", error);
        }
    }

</script>

<script>
    async function deleteEnrollment(enrollmentId) {
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        try {
            const response = await fetch('/Course/DeleteEnrollment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': token
                },
                body: JSON.stringify(enrollmentId)  // Send the enrollmentId in the body
            });

            if (response.ok) {
                console.log("Enrollment deleted successfully.");

                // Fetch the updated enrolled courses after successful deletion
                const enrolledCoursesResponse = await fetch('/Course/GetEnrolledCoursesTable', {
                    method: 'GET'
                });

                if (enrolledCoursesResponse.ok) {
                    const html = await enrolledCoursesResponse.text();  // Fetch the updated HTML for enrolled courses
                    document.getElementById("enrolledCourses").innerHTML = html;  // Update the enrolled courses table
                    updateCalendar(); //Should update the calendar when course is deleted
                } 
                else 
                {
                    console.error("Failed to fetch enrolled courses. Response code: " + enrolledCoursesResponse.status);
                }
            } 
            else 
            {
                console.error("Failed to delete enrollment. Response code: " + response.status);
            }
        } 
        catch (error) 
        {
            console.error("Error during deletion:", error);
        }
    }

</script>

<!--Addition of calendar to page that shows how a student's day / schedule will look-->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var calendarEl = document.getElementById('calendar');
        var calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'timeGridWeek',
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'timeGridWeek,timeGridDay'
            },
            events: async function (fetchInfo, successCallback, failureCallback) {
                try {
                    // Fetch the events from your server
                    let response = await fetch('/Course/GetEnrolledCourses');
                    if (response.ok) {
                        let events = await response.json();
                        successCallback(events); // Load events into the calendar
                    } else {
                        console.error("Failed to fetch events.");
                    }
                } catch (error) {
                    console.error("Error fetching events:", error);
                }
            },
            eventColor: '#378006' // Set color
        });

        calendar.render();

        window.updateCalendar = function () {
            calendar.refetchEvents(); // Refresh events from the server
        };
    });
</script>

