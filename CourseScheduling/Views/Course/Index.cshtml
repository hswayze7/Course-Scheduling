@model CourseScheduling.Models.CourseEnrollmentViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Html.AntiForgeryToken()

<div class="container-fluid mt-4">
    <h2 class="text-primary">Available Courses</h2>

    @if (ViewBag.StudentName != null)
    {
        <p class="text-success">Welcome, <strong>@ViewBag.StudentName</strong>!</p>
    }

    <h3>Select Courses to Enroll</h3>
    <div class="table-responsive mb-4" style="max-height: 300px; overflow-y: auto;">
        <table class="table table-bordered table-hover table-striped">
            <thead class="thead-dark">
                <tr>
                    <th>Course Code</th>
                    <th>Course Name</th>
                    <th>Credits</th>
                    <th>Time</th>
                    <th>Professor</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var course in Model.AvailableCourses)
                {
                    <tr>
                        <td>@course.CourseCode</td>
                        <td>@course.CourseName</td>
                        <td>@course.Credits</td>
                        <td>@course.Time</td>
                        <td>@course.Professor</td>
                        <td>
                            <button type="button" class="btn btn-primary btn-sm" onclick="enroll(@course.CourseId)">Enroll</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="row">
        <!-- Enrolled Courses Section -->
        <div class="col-md-6 mb-4">
            <h2 class="text-primary">Your Enrolled Courses</h2>
            <h3>Total Credits Enrolled: <span id="totalCredits">@Model.TotalCredits</span></h3>
            <div id="enrolledCourses" class="table-responsive" style="border: 1px solid #ddd; padding: 10px;">
                @await Html.PartialAsync("_EnrolledCourses", Model.EnrolledCourses)
            </div>
        </div>

        <!-- Calendar Section -->
        <div class="col-md-6 mb-4">
            <h2 class="text-primary">Class Schedule</h2>
            <div id="calendar" style="border: 1px solid #ddd; padding: 10px; min-height: 700px; width: 100%;"></div>
        </div>
    </div>
</div>

<script>
    //Function for when the student enrolls into a course. Will also update the calendar object and the enrolled classes table
    async function enroll(courseId) {
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        try {
            const response = await fetch('/Course/Enroll', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': token
                },
                body: JSON.stringify({ courseId: courseId })
            });
            if (response.ok) {
                console.log("Enrollment successful");
                await refreshEnrolledCourses();
                updateCalendar();
            } else {
                console.error("Failed to enroll. Response code: " + response.status);
            }
        } catch (error) {
            console.error("Error during enrollment:", error);
        }
    }

    //Function to delete a class after being enrolled.
    async function deleteEnrollment(enrollmentId) {
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        try {
            const response = await fetch('/Course/DeleteEnrollment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': token
                },
                body: JSON.stringify(enrollmentId)  // Send the enrollmentId in the body
            });

            if (response.ok) {
                console.log("Enrollment deleted successfully.");

                // Fetch the updated enrolled courses after successful deletion
                const enrolledCoursesResponse = await fetch('/Course/GetEnrolledCoursesTable', {
                    method: 'GET'
                });

                if (enrolledCoursesResponse.ok) {
                    const html = await enrolledCoursesResponse.text();
                    document.getElementById("enrolledCourses").innerHTML = html;
                    updateCalendar();  // Update the calendar view
                    updateTotalCredits();  // Update the total credits
                } else {
                    console.error("Failed to fetch updated enrolled courses.");
                }
            } else {
                console.error("Failed to delete enrollment. Status:", response.status);
            }
        } catch (error) {
            console.error("Error during deletion:", error);
        }
    }

    //Refresh the enroll table and calendar object when deleting / enrolling in classes.
    async function refreshEnrolledCourses() {
        try {
            const enrolledCoursesResponse = await fetch('/Course/GetEnrolledCoursesTable');
            if (enrolledCoursesResponse.ok) {
                const html = await enrolledCoursesResponse.text();
                document.getElementById("enrolledCourses").innerHTML = html;
                await updateTotalCredits();  // Update total credits after refreshing enrolled courses
            } else {
                console.error("Failed to fetch enrolled courses table.");
            }
        } catch (error) {
            console.error("Error fetching enrolled courses:", error);
        }
    }

    //Function to update the total number of credit hours a student is enrolled in after enrolling in another course
    async function updateTotalCredits() {
        try {
            const response = await fetch('/Course/GetTotalCredits');
            if (response.ok) {
                const data = await response.json();
                document.getElementById("totalCredits").innerText = data.totalCredits;
            } else {
                console.error("Failed to update total credits. Response code: " + response.status);
            }
        } catch (error) {
            console.error("Error updating total credits:", error);
        }
    }

    //Creatation of calendar object
    document.addEventListener('DOMContentLoaded', function () {
        var calendarEl = document.getElementById('calendar');
        var calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'timeGridWeek',
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'timeGridWeek,timeGridDay'
            },
            events: async function (fetchInfo, successCallback, failureCallback) {
                try {
                    let response = await fetch('/Course/GetEnrolledCourses');
                    if (response.ok) {
                        let events = await response.json();
                        successCallback(events);
                    }
                } catch (error) {
                    console.error("Error fetching events:", error);
                }
            },
            eventColor: '#378006'
        });

        calendar.render();
        window.updateCalendar = function () {
            calendar.refetchEvents();
        };
    });
</script>

<style>
    <!-- Additional styling to help with UI (did not help honestly. Needs more work) -->
    .container-fluid {
        padding: 0 2%;
    }

    .row > .col-md-6 {
        padding: 0;
        max-width: 100%;
    }

    #enrolledCourses .table-responsive {
        overflow: visible;
    }

    #calendar {
        width: 100%;
        min-height: 700px;
    }
</style>
