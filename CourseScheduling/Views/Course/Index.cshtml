@model CourseEnrollmentViewModel
@using CourseScheduling.ViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Html.AntiForgeryToken()

<div class="container-fluid mt-4">
    

    @if (ViewBag.StudentName != null)
    {
        <p class="text-success">Welcome, <strong>@ViewBag.StudentName</strong>!</p>
    }

    <h3>Select Courses to Enroll</h3>
    <!-- Search form -->
    <div class="container mt-4">
        <h2 class="text-primary">Available Courses</h2>

        <!-- Search form -->
        <form id="searchForm" asp-action="SearchCourses" method="get" class="mb-4">
            <div class="form-row">
                <div class="form-group col-md-6">
                    <input type="text" name="courseName" class="form-control" placeholder="Enter Course Name" />
                </div>
                <div class="form-group col-md-6">
                    <input type="text" name="courseCode" class="form-control" placeholder="Enter Course Code" />
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Search</button>
            <button type="button" class="btn btn-secondary ml-2" onclick="resetTable()">Reset</button>
        </form>

        <!-- Available Courses table -->
        <div id="availableCoursesTable" class="table-responsive">
            @await Html.PartialAsync("_AvailableCoursesTable", Model.AvailableCourses)
        </div>
    </div>

    <div class="row">
        <!-- Enrolled Courses Section -->
        <div class="col-md-6 mb-4">
            <h2 class="text-primary">Your Enrolled Courses</h2>
            <h3>Total Credits Enrolled: <span id="totalCredits">@Model.TotalCredits</span></h3>
            <div id="enrolledCourses" class="table-responsive" style="border: 1px solid #ddd; padding: 10px;">
                @await Html.PartialAsync("_EnrolledCourses", Model.EnrolledCourses)
            </div>
        </div>

        <!-- Calendar Section -->
        <div class="col-md-6 mb-4">
            <h2 class="text-primary">Class Schedule</h2>
            <div id="calendar" style="border: 1px solid #ddd; padding: 10px; min-height: 700px; width: 100%;"></div>
        </div>
    </div>
</div>

<!-- Bootstrap Modal to show more info on classes -->
<div class="modal fade" id="courseDetailsModal" tabindex="-1" aria-labelledby="courseDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="courseDetailsModalLabel">Course Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Dynamic content goes here -->
                <p><strong>Course Code:</strong> <span id="courseCode"></span></p>
                <p><strong>Course Name:</strong> <span id="courseName"></span></p>
                <p><strong>Credits:</strong> <span id="courseCredits"></span></p>
                <p><strong>Time:</strong> <span id="courseTime"></span></p>
                <p><strong>Professor:</strong> <span id="courseProfessor"></span></p>
                <p><strong>Description:</strong> <span id="courseDescription"></span></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#basicModal">
    Open Modal
</button>

<div class="modal fade" id="basicModal" tabindex="-1" aria-labelledby="basicModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="basicModalLabel">Basic Modal</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Test content.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<script>
    //Function for when the student enrolls into a course. Will also update the calendar object and the enrolled classes table
    async function enroll(courseId) {
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        try {
            const response = await fetch('/Course/Enroll', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': token
                },
                body: JSON.stringify({ courseId: courseId })
            });
            if (response.ok) {
                console.log("Enrollment successful");
                await refreshEnrolledCourses();
                updateCalendar();
            } else {
                console.error("Failed to enroll. Response code: " + response.status);
            }
        } catch (error) {
            console.error("Error during enrollment:", error);
        }
    }

    //Function to delete a class after being enrolled.
    async function deleteEnrollment(enrollmentId) {
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        try {
            const response = await fetch('/Course/DeleteEnrollment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': token
                },
                body: JSON.stringify(enrollmentId)  // Send the enrollmentId in the body
            });

            if (response.ok) {
                console.log("Enrollment deleted successfully.");

                // Fetch the updated enrolled courses after successful deletion
                const enrolledCoursesResponse = await fetch('/Course/GetEnrolledCoursesTable', {
                    method: 'GET'
                });

                if (enrolledCoursesResponse.ok) {
                    const html = await enrolledCoursesResponse.text();
                    document.getElementById("enrolledCourses").innerHTML = html;
                    updateCalendar();  // Update the calendar view
                    updateTotalCredits();  // Update the total credits
                } else {
                    console.error("Failed to fetch updated enrolled courses.");
                }
            } else {
                console.error("Failed to delete enrollment. Status:", response.status);
            }
        } catch (error) {
            console.error("Error during deletion:", error);
        }
    }

    //Refresh the enroll table and calendar object when deleting / enrolling in classes.
    async function refreshEnrolledCourses() {
        try {
            const enrolledCoursesResponse = await fetch('/Course/GetEnrolledCoursesTable');
            if (enrolledCoursesResponse.ok) {
                const html = await enrolledCoursesResponse.text();
                document.getElementById("enrolledCourses").innerHTML = html;
                await updateTotalCredits();  // Update total credits after refreshing enrolled courses
            } else {
                console.error("Failed to fetch enrolled courses table.");
            }
        } catch (error) {
            console.error("Error fetching enrolled courses:", error);
        }
    }



    //Function to update the total number of credit hours a student is enrolled in after enrolling in another course
    async function updateTotalCredits() {
        try {
            const response = await fetch('/Course/GetTotalCredits');
            if (response.ok) {
                const data = await response.json();
                document.getElementById("totalCredits").innerText = data.totalCredits;
            } else {
                console.error("Failed to update total credits. Response code: " + response.status);
            }
        } catch (error) {
            console.error("Error updating total credits:", error);
        }
    }

    //Creatation of calendar object
    document.addEventListener('DOMContentLoaded', function () {
        var calendarEl = document.getElementById('calendar');
        var calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'timeGridWeek',
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'timeGridWeek,timeGridDay'
            },
            events: async function (fetchInfo, successCallback, failureCallback) {
                try {
                    let response = await fetch('/Course/GetEnrolledCourses');
                    if (response.ok) {
                        let events = await response.json();
                        successCallback(events);
                    }
                } catch (error) {
                    console.error("Error fetching events:", error);
                }
            },
            eventColor: '#378006'
        });

        calendar.render();
        window.updateCalendar = function () {
            calendar.refetchEvents();
        };
    });
</script>

<script>
    document.getElementById("searchForm").addEventListener("submit", function (event) {
        event.preventDefault(); // Prevent the default form submission

        const courseName = document.querySelector("input[name='courseName']").value;
        const courseCode = document.querySelector("input[name='courseCode']").value;

        fetch(`/Course/SearchCourses?courseName=${courseName}&courseCode=${courseCode}`)
            .then(response => response.text())
            .then(html => {
                document.getElementById("availableCoursesTable").innerHTML = html; // Update the table
            })
            .catch(error => console.error("Error:", error));
    });

    function resetTable() {
        fetch(`/Course/Index`)
            .then(response => response.text())
            .then(html => {
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, "text/html");
                const tableContent = doc.querySelector("#availableCoursesTable").innerHTML;
                document.getElementById("availableCoursesTable").innerHTML = tableContent;

                document.querySelector("input[name='courseName']").value = "";
                document.querySelector("input[name='courseCode']").value = "";
            })
            .catch(error => console.error("Error:", error));
    }
</script>

<script>
    // Function to fetch and display course details in the modal
    async function showCourseDetails(courseId) {
        try {
            const response = await fetch(`/Course/GetCourseDetails?courseId=${courseId}`);
            if (response.ok) {
                const data = await response.json();

                // Populate modal content
                document.getElementById("courseCode").textContent = data.courseCode;
                document.getElementById("courseName").textContent = data.courseName;
                document.getElementById("courseCredits").textContent = data.credits;
                document.getElementById("courseTime").textContent = data.time;
                document.getElementById("courseProfessor").textContent = data.professor;
                document.getElementById("courseDescription").textContent = data.description;

                // Show the modal
                const modal = new bootstrap.Modal(document.getElementById('courseDetailsModal'));
                modal.show();
            } else {
                console.error("Failed to fetch course details. Response code:", response.status);
            }
        } catch (error) {
            console.error("Error fetching course details:", error);
        }
    }

    // Ensure Bootstrap modal is initialized globally (optional for debugging)
    document.addEventListener('DOMContentLoaded', function () {
        const modalElement = document.getElementById('courseDetailsModal');
        const modal = new bootstrap.Modal(modalElement);

        // Optionally expose modal to global scope for debugging
        window.courseDetailsModal = modal;
    });
</script>




<style>
    <!-- Additional styling to help with UI (did not help honestly. Needs more work) -->
    .container-fluid {
        padding: 0 15px;
    }

    #availableCoursesTable table {
        margin-top: 15px;
    }

    #calendar {
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 15px;
        background-color: #f9f9f9;
    }

    .modal-body {
        font-size: 1rem;
    }

    .table-hover tr:hover {
        background-color: #f2f2f2;
        cursor: pointer;
    }

</style>
