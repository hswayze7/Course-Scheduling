@model CourseEnrollmentViewModel
@using CourseScheduling.ViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Html.AntiForgeryToken()
<a href="@Url.Action("Profile", "Account")" class="btn btn-primary">
    <i class="bi bi-arrow-left-circle"></i> Back to Profile
</a>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <h2 class="text-primary">Available Courses</h2>
            <form id="searchForm" asp-action="SearchCourses" method="get" class="mb-4">
                <div class="row">
                    <div class="col-md-4 mb-2">
                        <input type="text" name="courseName" class="form-control" placeholder="Enter Course Name" />
                    </div>
                    <div class="col-md-4 mb-2">
                        <input type="text" name="courseCode" class="form-control" placeholder="Enter Course Code" />
                    </div>
                    <div class="col-md-4 d-flex">
                        <button type="submit" class="btn btn-primary me-2">Search</button>
                        <button type="button" class="btn btn-secondary" onclick="resetTable()">Reset</button>
                    </div>
                </div>
            </form>
            <div id="availableCoursesTable" class="table-responsive" style="max-height: 400px; overflow-y: auto;">
                @await Html.PartialAsync("_AvailableCoursesTable", Model)
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <h2 class="text-primary">Your Enrolled Courses</h2>
            <h4>Total Credits Enrolled: <span id="totalCredits">@Model.TotalCredits</span></h4>
            <div id="enrolledCourses" class="table-container">
                @await Html.PartialAsync("_EnrolledCourses", Model.EnrolledCourses)
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <h2 class="text-primary">Class Schedule</h2>
            <div id="calendar" class="calendar-container"></div>
        </div>
    </div>
</div>

@if (Model.RecommendedCourses != null && Model.RecommendedCourses.Any())
{
    <div class="row mt-4">
        <div class="col-12">
            <h2 class="text-primary">Recommended Courses Based on Your Major</h2>
            <div class="table-responsive">
                <table class="table table-bordered table-hover table-striped">
                    <thead class="thead-dark">
                        <tr>
                            <th>Course Code</th>
                            <th>Course Name</th>
                            <th>Credits</th>
                            <th>Time</th>
                            <th>Professor</th>
                            <th>Seats Available</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var course in Model.RecommendedCourses)
                        {
                            var enrolledCourses = ViewBag.EnrolledCourses as List<CourseScheduling.Models.Enrollment>;
                            var waitlistedCourses = ViewBag.WaitlistedCourses as List<CourseScheduling.Models.Waitlist>;

                            bool isEnrolled = enrolledCourses != null && enrolledCourses.Any(e => e.CourseId == course.CourseId);
                            bool isWaitlisted = waitlistedCourses != null && waitlistedCourses.Any(w => w.CourseId == course.CourseId);
                            int availableSeats = course.MaxCapacity - course.CurrentEnrollment;
                            string timeConflictIndicator = course.HasConflict ? " (Conflict)" : "";

                            <tr style="cursor: pointer;" onclick="showCourseDetails(@course.CourseId)" id="courseRow-@course.CourseId">
                                <td>@course.CourseCode</td>
                                <td>@course.CourseName</td>
                                <td>@course.Credits</td>
                                <td>@course.Time<span class="text-danger">@timeConflictIndicator</span></td>
                                <td>@course.Professor</td>
                                <td class="seatsColumn">@availableSeats / @course.MaxCapacity</td>
                                <td>
                                    @if (isEnrolled)
                                    {
                                        <button type="button" class="btn btn-success btn-sm enrollButton" onclick="event.stopPropagation(); deleteEnrollment(event, @enrolledCourses.First(e => e.CourseId == course.CourseId).EnrollmentId)">Enrolled</button>
                                    }
                                    else if (isWaitlisted)
                                    {
                                        <button type="button" class="btn btn-warning btn-sm" disabled>Waitlisted</button>
                                    }
                                    else if (availableSeats <= 0)
                                    {
                                        <button type="button" class="btn btn-secondary btn-sm" disabled>Full</button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-primary btn-sm enrollButton" onclick="enroll(event, @course.CourseId)">Enroll</button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

<div class="modal fade" id="courseDetailsModal" tabindex="-1" aria-labelledby="courseDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Course Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p><strong>Course Code:</strong> <span id="courseCode"></span></p>
                <p><strong>Course Name:</strong> <span id="courseName"></span></p>
                <p><strong>Credits:</strong> <span id="courseCredits"></span></p>
                <p><strong>Time:</strong> <span id="courseTime"></span></p>
                <p><strong>Professor:</strong> <span id="courseProfessor"></span></p>
                <p><strong>Description:</strong> <span id="courseDescription"></span></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        async function enroll(event, courseId) {
            event.stopPropagation();
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            try {
                const response = await fetch('/Course/Enroll', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': token
                    },
                    body: JSON.stringify({ courseId: courseId })
                });

                if (response.ok) {
                    const updatedCourse = await response.json();
                    alert("Enrollment successful!");
                    updateCourseRow(updatedCourse);
                    await refreshEnrolledCourses();
                    updateCalendar();
                } else {
                    const errorMsg = await response.text();
                    alert("Enrollment failed: " + errorMsg);
                }
            } catch (error) {
                console.error("Error during enrollment:", error);
                alert("An error occurred while enrolling.");
            }
        }

        function updateCourseRow(updatedCourse) {
            const row = document.querySelector(`#courseRow-${updatedCourse.courseId}`);
            if (row) {
                const availableSeats = updatedCourse.maxCapacity - updatedCourse.currentEnrollment;
                row.querySelector('.seatsColumn').textContent = `${availableSeats} / ${updatedCourse.maxCapacity}`;
                const enrollButton = row.querySelector('.enrollButton');
                enrollButton.textContent = 'Enrolled';
                enrollButton.disabled = true;
                enrollButton.classList.remove('btn-primary');
                enrollButton.classList.add('btn-success');
            }
        }

        async function deleteEnrollment(event, enrollmentId) {
            event.stopPropagation();
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            try {
                const response = await fetch('/Course/DeleteEnrollment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': token
                    },
                    body: JSON.stringify(enrollmentId)
                });

                if (response.ok) {
                    const updatedCourse = await response.json();
                    document.getElementById(`enrolledRow-${enrollmentId}`).remove();
                    updateCourseRowOnDelete(updatedCourse);
                    updateCalendar();
                    await updateTotalCredits();
                } else {
                    alert("Failed to delete enrollment.");
                }
            } catch (error) {
                console.error("Error during deletion:", error);
            }
        }

        function updateCourseRowOnDelete(updatedCourse) {
            const row = document.querySelector(`#courseRow-${updatedCourse.courseId}`);
            if (row) {
                const availableSeats = updatedCourse.maxCapacity - updatedCourse.currentEnrollment;
                row.querySelector('.seatsColumn').textContent = `${availableSeats} / ${updatedCourse.maxCapacity}`;
                const enrollButton = row.querySelector('.enrollButton');
                enrollButton.textContent = 'Enroll';
                enrollButton.disabled = false;
                enrollButton.classList.remove('btn-secondary', 'btn-success');
                enrollButton.classList.add('btn-primary');
            }
        }

        async function refreshEnrolledCourses() {
            try {
                const response = await fetch('/Course/GetEnrolledCoursesTable');
                if (response.ok) {
                    const html = await response.text();
                    document.getElementById("enrolledCourses").innerHTML = html;
                    await updateTotalCredits();
                }
            } catch (error) {
                console.error("Error refreshing enrolled courses:", error);
            }
        }

        async function updateTotalCredits() {
            try {
                const response = await fetch('/Course/GetTotalCredits');
                if (response.ok) {
                    const data = await response.json();
                    document.getElementById("totalCredits").innerText = data.totalCredits;
                }
            } catch (error) {
                console.error("Error updating total credits:", error);
            }
        }

        async function showCourseDetails(courseId) {
            try {
                const response = await fetch(`/Course/GetCourseDetails?courseId=${courseId}`);
                if (response.ok) {
                    const data = await response.json();
                    document.getElementById("courseCode").textContent = data.courseCode;
                    document.getElementById("courseName").textContent = data.courseName;
                    document.getElementById("courseCredits").textContent = data.credits;
                    document.getElementById("courseTime").textContent = data.time;
                    document.getElementById("courseProfessor").textContent = data.professor;
                    document.getElementById("courseDescription").textContent = data.description;
                    const modal = new bootstrap.Modal(document.getElementById('courseDetailsModal'));
                    modal.show();
                }
            } catch (error) {
                console.error("Error fetching course details:", error);
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            const modalElement = document.getElementById('courseDetailsModal');
            window.courseDetailsModal = new bootstrap.Modal(modalElement);

            const calendarEl = document.getElementById('calendar');
            const calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'timeGridWeek',
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'timeGridWeek,timeGridDay'
                },
                events: async function (fetchInfo, successCallback, failureCallback) {
                    try {
                        let response = await fetch('/Course/GetEnrolledCourses');
                        if (response.ok) {
                            let events = await response.json();
                            successCallback(events);
                        }
                    } catch (error) {
                        console.error("Error fetching events:", error);
                    }
                },
                eventColor: '#378006'
            });

            calendar.render();
            window.updateCalendar = function () {
                calendar.refetchEvents();
            };
        });
    </script>
}

<style>
    .table-container {
        width: 100%;
        max-width: 100%;
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 15px;
        background-color: #fff;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .calendar-container {
        width: 100%;
        height: 700px;
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 15px;
        background-color: #fff;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .fixed-header-table {
        width: 100%;
        border-collapse: collapse;
    }

        .fixed-header-table thead th {
            position: sticky;
            top: 0;
            background-color: #fff; 
            z-index: 2;
            box-shadow: 0 2px 2px -1px rgba(0,0,0,0.4);
        }
</style>
